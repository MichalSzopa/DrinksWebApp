@page "/user/drinks"

<PageTitle>My drinks</PageTitle>

@using DrinksWebApp.Models
@using DrinksWebApp.Data
@using DrinksWebApp.Services
@using System.Security.Claims;

@inject AlcoholIngredientService alcoholIngredientService
@inject DrinkService drinkService
@inject IngredientService ingredientService
@inject AuthenticationStateProvider authStateProvider
@inject UserService userService



@if (drinks == null)
{
    <h2>No drinks to display</h2>
}
else
{
    <div class="d-flex" style="display: inline-flex; flex-direction: row; justify-content: flex-start;">
        <label for="Ingredients" class="form-label">Ingredients</label>
        <div class="col-md-4">
            <select @bind="selectedIngredients" multiple>
                @foreach (var ingredient in @ingredients)
                {
                    <option value="@ingredient.Id"> @ingredient.Name </option>
                }
            </select>
        </div>

        <label for="AlcoholIngredients" class="form-label">Alcohol Ingredients</label>
        <div class="col-md-4">
            <select @bind="selectedAlcoholIngredients" multiple>
                @foreach (var alcoholIngredient in @alcoholIngredients)
                {
                    <option value="@alcoholIngredient.Id"> @alcoholIngredient.Name </option>
                }
            </select>
        </div>

        <button class="btn btn-light" @onclick="Filter">Filtruj</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var drink in drinks)
            {
                var href = "drinks/details/" + drink.Id.ToString();
                <tr>
                    <td>@drink.Name</td>
                    <td>@drink.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ICollection<Drink> drinks;

    protected Ingredient[] ingredients;
    protected string[] selectedIngredients = new string[] { };
    protected AlcoholIngredient[] alcoholIngredients;
    protected string[] selectedAlcoholIngredients = new string[] { };

    protected override async Task OnInitializedAsync()
    {
        //var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        //var claims = await customAuthStateProvider.GetAuthenticationStateAsync();

        //var userName = claims.User.Claims.Where(c => c.Type == ClaimTypes.Name).Select(c => c.Value).FirstOrDefault();

        //if (string.IsNullOrEmpty(userName))
        //{
        //    throw new Exception("No user");
        //}

        //var user = await userService.GetUserByName(userName); 

        // drinks = await drinkService.GetByUserId(user.Id);
        ingredients = await ingredientService.GetAll();
        alcoholIngredients = await alcoholIngredientService.GetAll();
    }

    protected async Task Filter()
    {
        var ingreds = selectedIngredients.Select(si => int.Parse(si)).ToList();
        var alcIngreds = selectedAlcoholIngredients.Select(si => int.Parse(si)).ToList();
        drinks = await drinkService.GetByIngredients(ingreds, alcIngreds);
    }
}